import streamlit as st
import pandas as pd
from datetime import datetime
import plotly.express as px
import io

st.set_page_config(page_title="Shopee Dashboard", layout="wide", page_icon="üìä")

# ===== CSS tu·ª≥ ch·ªânh =====
st.markdown(
    """
    <style>
        /* T·ªïng th·ªÉ */
        html, body, [class*="css"] {
            font-family: 'Segoe UI', sans-serif;
        }
        h1, h3, h4 {
            color: #333333;
        }
        .centered {
            text-align: center;
        }
        .upload-box {
            border: 2px dashed #cccccc;
            padding: 20px;
            border-radius: 10px;
            background-color: #f9f9f9;
        }
    </style>
""",
    unsafe_allow_html=True,
)

# ===== HEADER =====
col_logo, col_title, col_empty = st.columns([1, 4, 1])
with col_logo:
    st.image(
        "https://raw.githubusercontent.com/CaptainCattt/Report_of_shopee/main/logo-lamvlog.png",
        width=120,
    )
with col_title:
    st.markdown(
        """
        <div style='display: flex; justify-content: center; align-items: center; gap: 10px;'>
            <img src='https://img.icons8.com/color/48/shopee.png' width='40'/>
            <h1 style='margin: 0;color: #f1582e'>DASHBOARD B√ÅO C√ÅO SHOPEE</h1>
        </div>
    """,
        unsafe_allow_html=True,
    )

st.markdown(
    "<hr style='margin-top: 10px; margin-bottom: 30px;'>", unsafe_allow_html=True
)

# ===== UPLOAD FILE =====
st.markdown("### üì§ T·∫£i l√™n d·ªØ li·ªáu", unsafe_allow_html=True)
col1, col2 = st.columns(2)

with col1:
    st.markdown(
        "<div class='upload-box'><h4 class='centered'>üìÅ File t·∫•t c·∫£ ƒë∆°n h√†ng Shopee</h4>",
        unsafe_allow_html=True,
    )
    file_all = st.file_uploader("Ch·ªçn file Excel", type=["xlsx", "xls"], key="file_all")
    st.markdown("</div>", unsafe_allow_html=True)

with col2:
    st.markdown(
        "<div class='upload-box'><h4 class='centered'>üí∞ File doanh thu Shopee</h4>",
        unsafe_allow_html=True,
    )
    file_income = st.file_uploader(
        "Ch·ªçn file Excel", type=["xlsx", "xls"], key="file_income"
    )
    st.markdown("</div>", unsafe_allow_html=True)

# ===== L·ªåC THEO NG√ÄY =====
st.markdown(
    """
    <br>
    <h4>üìÖ Ch·ªçn kho·∫£ng ng√†y c·∫ßn ph√¢n t√≠ch <span style='font-weight: normal;'>(tu·ª≥ ch·ªçn)</span></h4>
""",
    unsafe_allow_html=True,
)

col3, col4 = st.columns(2)
with col3:
    ngay_bat_dau = st.date_input("üî∞ Ng√†y b·∫Øt ƒë·∫ßu", value=datetime.now().date())
with col4:
    ngay_ket_thuc = st.date_input("üèÅ Ng√†y k·∫øt th√∫c", value=datetime.now().date())

ngay_bat_dau = pd.to_datetime(ngay_bat_dau)
ngay_ket_thuc = pd.to_datetime(ngay_ket_thuc)


def read_file_shopee(df_all, df_income, ngay_bat_dau, ngay_ket_thuc):
    df_income.columns = df_income.columns.str.strip()
    df_all.columns = df_all.columns.str.strip()
    df_all["Actually type"] = df_all["Tr·∫°ng Th√°i ƒê∆°n H√†ng"]
    df_all["Actually type"] = df_all["Actually type"].apply(
        lambda x: (
            "ƒê∆°n h√†ng ƒë√£ ƒë·∫øn User"
            if isinstance(x, str) and "Ng∆∞·ªùi mua x√°c nh·∫≠n ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√†ng" in x
            else x
        )
    )
    df_all["SKU Category"] = df_all["SKU ph√¢n lo·∫°i h√†ng"].copy()

    # Danh s√°ch c√°c m·∫´u thay th·∫ø
    replacements = {
        r"^(COMBO-SC-ANHDUC|COMBO-SC-NGOCTRINH|COMBO-SC-MIX|SC_COMBO_MIX|SC_COMBO_MIX_LIVESTREAM|COMBO-SC_LIVESTREAM)": "COMBO-SC",
        r"^(SC_X1)": "SC-450g",
        r"^(SC_X2)": "SC-x2-450g",
        r"^(SC_COMBO_X1|COMBO-CAYVUA-X1|SC_COMBO_X1_LIVESTREAM|COMBO-SCX1_LIVESTREAM)": "COMBO-SCX1",
        r"^(SC_COMBO_X2|COMBO-SIEUCAY-X2|SC_COMBO_X2_LIVESTREAM|COMBO-SCX2_LIVESTREAM)": "COMBO-SCX2",
        r"^(BTHP-Cay-200gr|BTHP_Cay)": "BTHP-CAY",
        r"^(BTHP-200gr|BTHP_KhongCay)": "BTHP-0CAY",
        r"^(BTHP_COMBO_MIX|BTHP003_combo_mix)": "BTHP-COMBO",
        r"^(BTHP_COMBO_KhongCay|BTHP003_combo_kocay)": "BTHP-COMBO-0CAY",
        r"^(BTHP_COMBO_Cay|BTHP003_combo_cay)": "BTHP-COMBO-CAY",
        r"^BTHP-COMBO\+SC_X1$": "COMBO_BTHP_SCx1",
        r"^BTHP-COMBO\+SC_X2$": "COMBO_BTHP_SCx2",
        r"^BTHP_COMBO_MIX\+SC_X1$": "COMBO_BTHP_SCx1",
        r"^BTHP_COMBO_MIX\+SC_X2$": "COMBO_BTHP_SCx2",
        r"^(BTHP-2Cay-2KhongCay)$": "COMBO_4BTHP",
        r"^(BTHP-4Hu-KhongCay)$": "4BTHP_0CAY",
        r"^(BTHP-4Hu-Cay)$": "4BTHP_CAY",
    }

    for pattern, replacement in replacements.items():
        df_all["SKU Category"] = df_all["SKU Category"].str.replace(
            pattern, replacement, regex=True
        )
    date_columns_shopee = [
        "Ng√†y ƒë·∫∑t h√†ng",
        "Ng√†y giao h√†ng d·ª± ki·∫øn",
        "NgaÃÄy g∆∞Ãâi haÃÄng",
        "Th·ªùi gian giao h√†ng",
    ]

    # √âp ki·ªÉu v·ªÅ datetime v·ªõi ƒë·ªãnh d·∫°ng ƒë√∫ng
    df_all[date_columns_shopee] = df_all[date_columns_shopee].apply(
        lambda col: pd.to_datetime(col, errors="coerce", format="%Y-%m-%d %H:%M")
    )

    # Lo·∫°i b·ªè gi·ªù, gi·ªØ l·∫°i ph·∫ßn ng√†y
    for col in date_columns_shopee:
        df_all[col] = df_all[col].dt.normalize()

    # Ki·ªÉm tra xem c·ªôt c√≤n t·ªìn t·∫°i kh√¥ng

    df_merged = pd.merge(
        df_income,
        df_all,
        how="left",
        right_on="M√£ ƒë∆°n h√†ng",
        left_on="M√£ ƒë∆°n h√†ng",
    )

    df_merged["Ng√†y ho√†n th√†nh thanh to√°n"] = pd.to_datetime(
        df_merged["Ng√†y ho√†n th√†nh thanh to√°n"], errors="coerce"
    )

    df_main = df_merged[
        (df_merged["Ng√†y ho√†n th√†nh thanh to√°n"] >= ngay_bat_dau)
        & (df_merged["Ng√†y ho√†n th√†nh thanh to√°n"] <= ngay_ket_thuc)
    ]

    Don_hoan_thanh = df_main[df_main["T·ªïng ti·ªÅn ƒë√£ thanh to√°n"] > 0]

    Don_hoan_tra = df_main[
        (df_main["Tr·∫°ng th√°i Tr·∫£ h√†ng/Ho√†n ti·ªÅn"] == "ƒê√£ Ch·∫•p Thu·∫≠n Y√™u C·∫ßu")
        | (df_main["S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë∆∞·ª£c ho√†n tr·∫£"] != 0)
    ]

    Don_huy = df_all[
        (df_all["Tr·∫°ng Th√°i ƒê∆°n H√†ng"] == "ƒê√£ h·ªßy")
        & (df_all["Ng√†y ƒë·∫∑t h√†ng"] >= ngay_bat_dau)
        & (df_all["Ng√†y ƒë·∫∑t h√†ng"] <= ngay_ket_thuc)
    ]

    return df_main, Don_hoan_thanh, Don_hoan_tra, Don_huy


if "processing" not in st.session_state:
    st.session_state.processing = False

# N√∫t x·ª≠ l√Ω
# N√∫t X·ª≠ l√Ω d·ªØ li·ªáu
with st.container():
    st.markdown('<div class="center-button">', unsafe_allow_html=True)
    process_btn = st.button(
        "üîç X·ª≠ l√Ω d·ªØ li·ªáu",
        key="process_data",
        disabled=st.session_state.processing,
        use_container_width=True,
    )
    st.markdown("</div>", unsafe_allow_html=True)

if st.button("üîÅ Reset", use_container_width=True):
    st.session_state.clear()
    st.rerun()

if process_btn:
    if file_all and file_income:
        with st.spinner("‚è≥ ƒêang x·ª≠ l√Ω d·ªØ li·ªáu, vui l√≤ng ch·ªù..."):
            # ƒê·ªçc file
            df_all = pd.read_excel(
                file_all,
                dtype={"M√£ ƒë∆°n h√†ng": str, "M√£ Ki·ªán H√†ng": str, "M√£ v·∫≠n ƒë∆°n": str},
            )
            df_income = pd.read_excel(
                file_income,
                sheet_name="Income",  # t√™n sheet
                dtype={
                    "M√£ ƒë∆°n h√†ng": str,
                    "M√£ S·ªë Thu·∫ø": str,
                    "M√£ y√™u c·∫ßu ho√†n ti·ªÅn": str,
                },
            )

            # G·ªçi h√†m x·ª≠ l√Ω ch√≠nh
            df_main, Don_hoan_thanh, Don_hoan_tra, Don_huy = read_file_shopee(
                df_all, df_income, ngay_bat_dau, ngay_ket_thuc
            )
            st.session_state.update(
                {
                    "df_main": df_main,
                    "Don_hoan_thanh": Don_hoan_thanh,
                    "Don_hoan_tra": Don_hoan_tra,
                    "Don_huy": Don_huy,
                    "df_all": df_all,
                    "df_income": df_income,
                }
            )

            st.session_state.processing = True

import plotly.express as px
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns


if st.session_state.processing:
    st.markdown("## üõí BI·ªÇU ƒê·ªí SHOPEE")

    df_shopee_main = st.session_state.get("df_main").copy()

    Don_ht = st.session_state.get("Don_hoan_thanh")
    Don_hoantra = st.session_state.get("Don_hoan_tra")
    Don_huy = st.session_state.get("Don_huy")
    df_all = st.session_state.get("df_all")
    df_income = st.session_state.get("df_income")

    Don_quyettoan = df_shopee_main.drop_duplicates(subset="M√£ ƒë∆°n h√†ng").copy()

    # Bi·ªÉu ƒë·ªì 1: S·ªë l∆∞·ª£ng ƒë∆°n h√†ng theo lo·∫°i
    df_counts = pd.DataFrame(
        {
            "Lo·∫°i ƒë∆°n": ["Ho√†n th√†nh", "Ho√†n tr·∫£", "H·ªßy"],
            "S·ªë l∆∞·ª£ng": [
                Don_ht["M√£ ƒë∆°n h√†ng"].nunique(),
                Don_hoantra["M√£ ƒë∆°n h√†ng"].nunique(),
                Don_huy["M√£ ƒë∆°n h√†ng"].nunique(),
            ],
        }
    )
    fig1 = px.bar(
        df_counts,
        x="Lo·∫°i ƒë∆°n",
        y="S·ªë l∆∞·ª£ng",
        color="Lo·∫°i ƒë∆°n",
        title="üì¶ S·ªë l∆∞·ª£ng ƒë∆°n theo lo·∫°i (Shopee)",
    )
    st.plotly_chart(fig1, use_container_width=True)

    # T·ªïng doanh thu
    total_revenue = Don_quyettoan["T·ªïng ti·ªÅn ƒë√£ thanh to√°n"].sum()
    st.metric("üí∞ T·ªïng doanh thu", f"{total_revenue:,.0f} ‚Ç´")

    # Doanh thu theo ng√†y
    if "Ng√†y ho√†n th√†nh thanh to√°n" in Don_quyettoan.columns:
        Don_quyettoan = Don_quyettoan.copy()
        Don_quyettoan.loc[:, "Ng√†y ho√†n th√†nh thanh to√°n"] = pd.to_datetime(
            Don_quyettoan["Ng√†y ho√†n th√†nh thanh to√°n"]
        )
        Don_quyettoan.loc[:, "Ng√†y"] = Don_quyettoan[
            "Ng√†y ho√†n th√†nh thanh to√°n"
        ].dt.date

        df_rev_by_day = (
            Don_quyettoan.groupby("Ng√†y")["T·ªïng ti·ªÅn ƒë√£ thanh to√°n"].sum().reset_index()
        )
        fig2 = px.line(
            df_rev_by_day,
            x="Ng√†y",
            y="T·ªïng ti·ªÅn ƒë√£ thanh to√°n",
            title="üìà Doanh thu theo ng√†y",
            markers=True,
        )
        st.plotly_chart(fig2, use_container_width=True)

        df_count_by_day = (
            Don_quyettoan.groupby("Ng√†y")["M√£ ƒë∆°n h√†ng"].nunique().reset_index()
        )
        fig3 = px.bar(
            df_count_by_day, x="Ng√†y", y="M√£ ƒë∆°n h√†ng", title="üì¶ S·ªë ƒë∆°n theo ng√†y"
        )
        st.plotly_chart(fig3, use_container_width=True)

    # Doanh thu theo SKU
    if "SKU Category" in df_shopee_main.columns:
        df_sku = (
            df_shopee_main.groupby("SKU Category")["T·ªïng ti·ªÅn ƒë√£ thanh to√°n"]
            .sum()
            .reset_index()
        )
        fig4 = px.bar(
            df_sku,
            x="SKU Category",
            y="T·ªïng ti·ªÅn ƒë√£ thanh to√°n",
            title="üß∫ Doanh thu theo SKU",
            color="T·ªïng ti·ªÅn ƒë√£ thanh to√°n",
        )
        st.plotly_chart(fig4, use_container_width=True)

    # S·ªë l∆∞·ª£ng theo SKU
    if df_shopee_main is not None and not df_shopee_main.empty:
        fig5 = px.histogram(
            df_shopee_main,
            x="SKU Category",
            y="S·ªë l∆∞·ª£ng",
            color="SKU Category",
            title="üìä S·ªë l∆∞·ª£ng theo SKU",
        )
        st.plotly_chart(fig5, use_container_width=True)

    # Doanh thu theo t·ªânh
    if "T·ªânh/Th√†nh ph·ªë" in Don_quyettoan.columns:
        df_prov = (
            Don_quyettoan.groupby("T·ªânh/Th√†nh ph·ªë")["T·ªïng ti·ªÅn ƒë√£ thanh to√°n"]
            .sum()
            .reset_index()
        )
        fig6 = px.bar(
            df_prov,
            x="T·ªânh/Th√†nh ph·ªë",
            y="T·ªïng ti·ªÅn ƒë√£ thanh to√°n",
            title="üìç Doanh thu theo t·ªânh",
            color="T·ªïng ti·ªÅn ƒë√£ thanh to√°n",
        )
        st.plotly_chart(fig6, use_container_width=True)

    # Top ng∆∞·ªùi mua
    if Don_ht is not None and not Don_ht.empty and "Ng∆∞·ªùi Mua_y" in Don_ht.columns:
        df_ht = Don_ht.copy()
        buyers = (
            df_ht.groupby("Ng∆∞·ªùi Mua_y")
            .agg(So_don=("M√£ ƒë∆°n h√†ng", "nunique"), Tong_sl=("S·ªë l∆∞·ª£ng", "sum"))
            .reset_index()
        )

        col4, col5 = st.columns(2)

        with col4:
            top_don = buyers.sort_values("So_don", ascending=False).head(20)
            fig7 = px.bar(
                top_don,
                x="Ng∆∞·ªùi Mua_y",
                y="So_don",
                title="üèÜ Top ng∆∞·ªùi mua theo s·ªë ƒë∆°n",
                color_discrete_sequence=["#1f77b4"],
            )
            fig7.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig7, use_container_width=True)

        with col5:
            top_sl = buyers.sort_values("Tong_sl", ascending=False).head(20)
            fig8 = px.bar(
                top_sl,
                x="Ng∆∞·ªùi Mua_y",
                y="Tong_sl",
                title="üéÅ Top ng∆∞·ªùi mua theo s·ªë l∆∞·ª£ng s·∫£n ph·∫©m",
                color_discrete_sequence=["#FF7F0E"],
            )
            fig8.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig8, use_container_width=True)

    # Bi·ªÉu ƒë·ªì tr√≤n ph∆∞∆°ng th·ª©c thanh to√°n
    if "Ph∆∞∆°ng th·ª©c thanh to√°n" in Don_quyettoan.columns:
        df_pie = Don_quyettoan["Ph∆∞∆°ng th·ª©c thanh to√°n"].value_counts().reset_index()
        df_pie.columns = ["Ph∆∞∆°ng th·ª©c", "S·ªë l∆∞·ª£ng"]
        fig_pie = px.pie(
            df_pie,
            names="Ph∆∞∆°ng th·ª©c",
            values="S·ªë l∆∞·ª£ng",
            title="üí≥ Ph∆∞∆°ng th·ª©c thanh to√°n",
        )
        st.plotly_chart(fig_pie, use_container_width=True)
